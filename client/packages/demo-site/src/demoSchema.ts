import { IntegerQueryColumn, QueryColumn, QueryColumnDataType, QueryColumnRuntimeType, StringQueryColumn } from "flowerbi";

// Important: this file is auto-generated by flowerbi.

export const Date = {
    Id: new QueryColumn<Date>("Date.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    CalendarYearNumber: new IntegerQueryColumn<number>("Date.CalendarYearNumber",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Short,
        ""
    )
), 
    FirstDayOfQuarter: new QueryColumn<Date>("Date.FirstDayOfQuarter",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    FirstDayOfMonth: new QueryColumn<Date>("Date.FirstDayOfMonth",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
};

export const DateReported = {
    Id: new QueryColumn<Date>("DateReported.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    CalendarYearNumber: new IntegerQueryColumn<number>("DateReported.CalendarYearNumber",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Short,
        ""
    )
), 
    FirstDayOfQuarter: new QueryColumn<Date>("DateReported.FirstDayOfQuarter",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    FirstDayOfMonth: new QueryColumn<Date>("DateReported.FirstDayOfMonth",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
};

export const DateResolved = {
    Id: new QueryColumn<Date>("DateResolved.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    CalendarYearNumber: new IntegerQueryColumn<number>("DateResolved.CalendarYearNumber",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Short,
        ""
    )
), 
    FirstDayOfQuarter: new QueryColumn<Date>("DateResolved.FirstDayOfQuarter",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    FirstDayOfMonth: new QueryColumn<Date>("DateResolved.FirstDayOfMonth",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
};

export const DateAssigned = {
    Id: new QueryColumn<Date>("DateAssigned.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    CalendarYearNumber: new IntegerQueryColumn<number>("DateAssigned.CalendarYearNumber",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Short,
        ""
    )
), 
    FirstDayOfQuarter: new QueryColumn<Date>("DateAssigned.FirstDayOfQuarter",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
    FirstDayOfMonth: new QueryColumn<Date>("DateAssigned.FirstDayOfMonth",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        ""
    )
), 
};

export const Workflow = {
    Id: new IntegerQueryColumn<number>("Workflow.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    Resolved: new QueryColumn<boolean>("Workflow.Resolved",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
    WorkflowState: new StringQueryColumn<string>("Workflow.WorkflowState",
    new QueryColumnRuntimeType(
        QueryColumnDataType.String,
        ""
    )
), 
    SourceOfError: new StringQueryColumn<string>("Workflow.SourceOfError",
    new QueryColumnRuntimeType(
        QueryColumnDataType.String,
        ""
    )
), 
    FixedByCustomer: new QueryColumn<boolean>("Workflow.FixedByCustomer",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
};

export const Category = {
    Id: new IntegerQueryColumn<number>("Category.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    Label: new StringQueryColumn<string>("Category.Label",
    new QueryColumnRuntimeType(
        QueryColumnDataType.String,
        ""
    )
), 
};

export const Customer = {
    Id: new IntegerQueryColumn<number>("Customer.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    CustomerName: new StringQueryColumn<string>("Customer.CustomerName",
    new QueryColumnRuntimeType(
        QueryColumnDataType.String,
        ""
    )
), 
};

export const Coder = {
    Id: new IntegerQueryColumn<number>("Coder.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    FullName: new StringQueryColumn<string>("Coder.FullName",
    new QueryColumnRuntimeType(
        QueryColumnDataType.String,
        ""
    )
), 
};

export const CoderAssigned = {
    Id: new IntegerQueryColumn<number>("CoderAssigned.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    FullName: new StringQueryColumn<string>("CoderAssigned.FullName",
    new QueryColumnRuntimeType(
        QueryColumnDataType.String,
        ""
    )
), 
};

export const CoderResolved = {
    Id: new IntegerQueryColumn<number>("CoderResolved.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    FullName: new StringQueryColumn<string>("CoderResolved.FullName",
    new QueryColumnRuntimeType(
        QueryColumnDataType.String,
        ""
    )
), 
};

export const CategoryCombination = {
    Id: new IntegerQueryColumn<number>("CategoryCombination.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    Crashed: new QueryColumn<boolean>("CategoryCombination.Crashed",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
    DataLoss: new QueryColumn<boolean>("CategoryCombination.DataLoss",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
    SecurityBreach: new QueryColumn<boolean>("CategoryCombination.SecurityBreach",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
    OffByOne: new QueryColumn<boolean>("CategoryCombination.OffByOne",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
    Slow: new QueryColumn<boolean>("CategoryCombination.Slow",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
    StackOverflow: new QueryColumn<boolean>("CategoryCombination.StackOverflow",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Bool,
        ""
    )
), 
};

export const Bug = {
    Id: new IntegerQueryColumn<number>("Bug.Id",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        ""
    )
), 
    WorkflowId: new IntegerQueryColumn<number>("Bug.WorkflowId",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        "Workflow.Id"
    )
), 
    CustomerId: new IntegerQueryColumn<number>("Bug.CustomerId",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        "Customer.Id"
    )
), 
    ReportedDate: new QueryColumn<Date>("Bug.ReportedDate",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        "DateReported.Id"
    )
), 
    ResolvedDate: new QueryColumn<Date>("Bug.ResolvedDate",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        "DateResolved.Id"
    )
), 
    AssignedDate: new QueryColumn<Date>("Bug.AssignedDate",
    new QueryColumnRuntimeType(
        QueryColumnDataType.DateTime,
        "DateAssigned.Id"
    )
), 
    CategoryCombinationId: new IntegerQueryColumn<number>("Bug.CategoryCombinationId",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        "CategoryCombination.Id"
    )
), 
    AssignedCoderId: new IntegerQueryColumn<number>("Bug.AssignedCoderId",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        "CoderAssigned.Id"
    )
), 
    ResolvedCoderId: new IntegerQueryColumn<number>("Bug.ResolvedCoderId",
    new QueryColumnRuntimeType(
        QueryColumnDataType.Int,
        "CoderResolved.Id"
    )
), 
};

export const BugSchema = {
    Date,
    DateReported,
    DateResolved,
    DateAssigned,
    Workflow,
    Category,
    Customer,
    Coder,
    CoderAssigned,
    CoderResolved,
    CategoryCombination,
    Bug,
};
