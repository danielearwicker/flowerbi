import YAML from "yaml";
import fs from "fs";

import { Schema } from "./FlowerBIYamlSchema";

const schemaSource = fs.readFileSync(
    "../dotnet/Demo/FlowerBI.DemoSchema/demoSchema.yaml",
    "utf-8"
);

const schema = YAML.parse(schemaSource) as Schema;




function tsType(dataType: string): string {
    dataType = dataType.toLowerCase();
    switch (dataType) {
        case "bool": return "boolean";
        case "string": return "string";
        case "datetime": return "Date";
    }
    return "number";
}

function tsColumnType(dataType: string, nullable: boolean): string {
    const type = nullable ? `${tsType(dataType)} | null` : tsType(dataType);
    return "number" ? `NumericQueryColumn<${type}>` : `QueryColumn<${type}>`;
}

function generateTypeScript(schema: Schema) {
    const lines: string[] = [
        `import { QueryColumn, NumericQueryColumn } from "flowerbi";`,
        ``,
        `// Important: this file is auto-generated by flowerbi.`,
    ];
    
    for (const [tableName, tableDef] of Object.entries(schema.tables)) {
        lines.push(``);
        lines.push(`export const ${tableName} = {`);

    }

}

    public static void FromSchema(ResolvedSchema schema, TextWriter writer, TextWriter console)
    {
        writer.WriteLine(@"import { QueryColumn, NumericQueryColumn } from ""flowerbi"";");
        writer.WriteLine();
        writer.WriteLine("// Important: this file is auto-generated by flowerbi.");
        writer.WriteLine();

        var tableWriter = new IndentedWriter(writer);

        foreach (var table in schema.Tables)
        {
            console.WriteLine($"Exporting table {table.Name}");
            writer.WriteLine($"export const {table.Name} = {{");

            var idColumn = table.IdColumn != null ? new[] { table.IdColumn } : Enumerable.Empty<ResolvedColumn>();

            foreach (var column in idColumn.Concat(table.Columns))
            {
                var tsType = TSColumnType(column.DataType, column.Nullable);
                tableWriter.WriteLine(@$"{column.Name}: new {tsType}(""{table.Name}.{column.Name}""),");
            }

            writer.WriteLine("};");
            writer.WriteLine();
        }
        
        writer.WriteLine($"export const {schema.Name} = {{");
        foreach (var table in schema.Tables)
        {
            tableWriter.WriteLine(@$"{table.Name},");
        }
        writer.WriteLine("};");

        writer.Flush();
        console.WriteLine("Done.");
    }
}
