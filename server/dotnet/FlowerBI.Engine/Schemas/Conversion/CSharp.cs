using System;
using System.IO;
using System.Linq;
using FlowerBI.Yaml;

namespace FlowerBI.Conversion;

public static class CSharp
{
    static string CSColumnType(DataType dataType, bool nullable)
    {
        var csType = dataType switch
        {
            DataType.Bool => "bool",
            DataType.Byte => "byte",
            DataType.Short => "short",
            DataType.Int => "int",
            DataType.Long => "long",
            DataType.Float => "float",
            DataType.Double => "double",
            DataType.Decimal => "decimal",
            DataType.String => "string",
            DataType.DateTime => "DateTime",
            _ => throw new InvalidOperationException($"Unsupported data type: {dataType}")
        };

        return nullable ? $"{csType}?" : csType;
    }

    public static void FromYaml(string yamlFile, string csFile, string csNamespace, TextWriter console)
        => FromSchema(ResolvedSchema.Resolve(File.ReadAllText(yamlFile)), csFile, csNamespace, console);

    static void FromSchema(ResolvedSchema schema, string csFile, string csNamespace, TextWriter console)
    {        
        using var writer = new WriteIfDifferent(csFile, console);

        FromSchema(schema, writer.Output, csNamespace, writer.Console);
    }

    public static void FromSchema(ResolvedSchema schema, TextWriter writer, string csNamespace, TextWriter console)
    {            
        writer.WriteLine("#nullable enable");
        writer.WriteLine($"namespace {csNamespace};");
        writer.WriteLine("using System;");
        writer.WriteLine("using FlowerBI;");
        writer.WriteLine();
        writer.WriteLine();
        writer.WriteLine("// Important: this file is auto-generated by flowerbi.");
        writer.WriteLine();
        
        writer.WriteLine($"[DbSchema(\"{schema.NameInDb}\")]");
        writer.WriteLine($"public static class {schema.Name}");
        writer.WriteLine("{");

        var schemaWriter = new IndentedWriter(writer);

        foreach (var table in schema.Tables)
        {
            console.WriteLine($"Exporting table {table.Name}");

            if (!table.conjoint)
            {
                schemaWriter.WriteLine($"[DbTable(\"{table.NameInDb}\")]");
            }
            else
            {
                schemaWriter.WriteLine($"[DbTable(\"{table.NameInDb}\", true)]");
            }
            
            schemaWriter.WriteLine($"public static class {table.Name}");
            schemaWriter.WriteLine("{");

            var tableWriter = new IndentedWriter(schemaWriter);

            void WriteColumn(ResolvedColumn column, string foreignKey, string plainColumn)
            {
                var columnType = CSColumnType(column.DataType, column.Nullable);
                var className = column.Target != null ? foreignKey : plainColumn;
                
                if (table.Associative != null && table.Associative.Any(a => a.Name == column.Name))
                {
                    tableWriter.WriteLine("[DbAssociative]");
                }
                
                var propertyDecl = $"public static readonly {className}<{columnType}> {column.Name} = new {className}<{columnType}>";
                
                var extends = column.Extends != null 
                    ? $", extends: {column.Extends.Table.Name}.{column.Extends.Name}"
                    : string.Empty;

                var fkArgs = (column.Target != null)
                    ? $", {column.Target.Table.Name}.{column.Target.Name}"
                    : string.Empty;
                
                tableWriter.WriteLine($"{propertyDecl}(\"{column.NameInDb}\"{fkArgs}{extends});");
            }

            if (table.IdColumn != null)
            {
                WriteColumn(table.IdColumn, "PrimaryForeignKey", "PrimaryKey");                
            }

            foreach (var column in table.Columns)
            {
                WriteColumn(column, "ForeignKey", "Column");
            }    

            schemaWriter.WriteLine("}");
        }

        writer.WriteLine("}");
        
        writer.Flush();
        console.WriteLine("Done.");
    }
}
